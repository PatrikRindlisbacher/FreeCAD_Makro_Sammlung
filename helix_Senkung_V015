import FreeCAD, FreeCADGui as Gui
from PySide2 import QtWidgets, QtCore
from collections import namedtuple
from math import pi, cos, sin

# ------------------------------------------
# Vorhandene TaskPanels schließen (max. 3 Versuche)
#for i in range(3):
#    if Gui.Control.activeDialog() is not None:
#        Gui.Control.closeDialog()
#    else:
#        break

# ------------------------------------------
# CAM/Path-Imports für FreeCAD 1.0.1
from CAM.Path.Op import Custom
from CAM.Path.Op import Util as PathUtils

# ------------------------------------------------------------
# DIN‑Tabelle (Tiefe & Senkloch‑Ø & y_oben)
HelixDIN = namedtuple("HelixDIN", ["tief", "senk", "durch", "y_oben"])
DIN_WERTE = {
    "M 3":  HelixDIN(1.7,  6.3, 3.4, 0.2),
    "M 4":  HelixDIN(2.2,  8.4, 4.5, 0.3),
    "M 5":  HelixDIN(2.5, 10.5, 5.5, 0.3),
    "M 6":  HelixDIN(3.0, 12.6, 6.6, 0.4),
    "M 8":  HelixDIN(4.0, 16.8, 9.0, 0.4),
    "M 10": HelixDIN(5.0, 21.0,11.0, 0.5),
    "M 12": HelixDIN(6.0, 24.0,14.0, 0.5),
    "M 16": HelixDIN(8.0, 32.0,18.0, 0.5),
    "M 18": HelixDIN(9.0, 36.0,20.0, 0.5),
    # ... ergänzen nach Bedarf ...
}

# ------------------------------------------------------------
# G‑Code‑Generator für eine Senkung mit Helix: 
# Fräst drei Bereiche: 
# 1. Oben zylindrisch (falls y_oben > 0)
# 2. Konisch (Senkung mit Durchmesserwechsel)
# 3. Unten zylindrisch (falls nötig, z.B. wenn z_end unter der Normtiefe liegt)

def generate_helix_gcode(center, r_top, r_bottom, z_start, y_oben, senktiefe, pitch, feedrate, z_end):
    # Berechne Z-Positionen für die einzelnen Fräsabschnitte
    z1 = z_start - y_oben        # Ende des oberen zylindrischen Teils
    z2 = z1 - senktiefe          # Ende des konischen Teils (Normtiefe)

    sections = []  																			# Liste der zu fräsenden Abschnitte, jeweils: (Z_start, Z_ende, R_start, R_ende)

    # Oberer zylindrischer Abschnitt (konstanter Radius r_top)
    if z_start > z1:
        sections.append((z_start, z1, r_top, r_top))

    # Konischer Abschnitt (Radius geht von r_top auf r_bottom)
    if z1 > z2:
        sections.append((z1, z2, r_top, r_bottom))

    # Unterer zylindrischer Abschnitt (konstanter Radius r_bottom)
    if z_end < z2:
        sections.append((z2, z_end, r_bottom, r_bottom))

    # Positioniere Werkzeug schnell an Startpunkt
    gc = [f"G0 X{center.x:.3f} Y{center.y:.3f} Z{z_start:.3f}"]

    # Gesamthöhe und -winkel der Helixbewegung
    helix_height = abs(z_start - z_end)
    helix_turns = max(1, int(helix_height / pitch))  # Mindestens eine Umdrehung
    angle_total = 2 * pi * helix_turns               # Gesamter Drehwinkel in Radiant

    z_global0 = z_start  # Referenzhöhe zum Berechnen der relativen Position in der Helix

    
    for z_s, z_e, r_s, r_e in sections:																	# Schleife über alle definierten Fräsabschnitte	
        dz = z_e - z_s                   																# Höhenunterschied dieses Abschnitts
        seg_height = abs(dz)
        seg_turns = max(1, int(seg_height / pitch))  													# Anzahl Umdrehungen für diesen Abschnitt
        pts = max(2, seg_turns * 36)     																# Auflösung der Bahn (36 Punkte pro Umdrehung)

        # Punktweise Interpolation entlang der Helix
        for i in range(1, pts + 1):
            t = i / pts                              # Verhältnis innerhalb des Abschnitts
            z = z_s + t * dz                         # Linearer Z-Verlauf
            ratio = (z_global0 - z) / helix_height if helix_height != 0 else 0  # Position relativ zur Gesamthöhe
            angle = ratio * angle_total              # Gesamtdrehung bis zu diesem Punkt
            r = r_s + t * (r_e - r_s)                # Interpolierter Radius (für konischen Verlauf)
            x = center.x + cos(angle) * r            # X-Position im Kreis
            y = center.y + sin(angle) * r            # Y-Position im Kreis

            # G1-Befehl (lineares Fräsen mit Vorschub)
            gc.append(f"G1 X{x:.3f} Y{y:.3f} Z{z:.3f} F{feedrate}")

    return gc  # Liste aller G‑Code-Zeilen zur Ausgabe


# ------------------------------------------------------------
class HelixPanel(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Helix‑Senkung erstellen")
        self.setAttribute(QtCore.Qt.WA_DeleteOnClose)
        self.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.setFocus()
        self.pt = None
        self.r_start = 0
        self.edit_obj = None
        self.obs = None

        form = QtWidgets.QFormLayout(self)

        self.auto_depth = QtWidgets.QComboBox()
        self.auto_depth.addItem("– manuell –")
        self.auto_depth.addItems(DIN_WERTE.keys())
        self.auto_depth.currentIndexChanged.connect(self.update_din_defaults)
        form.addRow("DIN‑Senkung:", self.auto_depth)

        self.d_top        = self._spin(form, "Ø oben:")
        self.d_bottom     = self._spin(form, "Ø unten:")
        self.taper_depth  = self._spin(form, "Senkungstiefe:", 0.1, 20.0, suffix=" mm", default=2.8)
        self.zyl_oben     = self._spin(form, "Zyl. Teil oben (y):", 0.0, 5.0, suffix=" mm", default=0.3)
        self.x_center     = self._spin(form, "X‑Zentrum:", -1000, 1000)
        self.y_center     = self._spin(form, "Y‑Zentrum:", -1000, 1000)
        self.z_start      = self._spin(form, "Z‑Start:",  -1000, 1000)
        self.z_end        = self._spin(form, "Z‑Ende:",   -1000, 1000)
        self.d_tool       = self._spin(form, "Fräser‑Ø:", default=3.0)
        self.feed         = self._spin(form, "Vorschub:", 1, 20000, suffix=" mm/min", default=150)
        self.pitch        = self._spin(form, "Steigung:", 0.01, 10, suffix=" mm/U", default=0.5)

        self.info  = QtWidgets.QLabel("Kreis im Modell wählen …")
        form.addRow(self.info)
        self.btn_ok = QtWidgets.QPushButton()
        self.btn_ok.clicked.connect(self.finish)
        self.btn_ok.setEnabled(False)
        form.addRow(self.btn_ok)

        self.btn_close = QtWidgets.QPushButton("Panel schließen")
        self.btn_close.clicked.connect(self.close_panel)
        form.addRow(self.btn_close)

        self.set_button_text()
        self.obs = self.Observer(self)
        Gui.Selection.addObserver(self.obs)

    
        def reject(self):
            # Verhindert den Standard-Abbrechen-Knopf oben
            Gui.Control.closeDialog()
    
        def accept(self):
            # Optional: Keine Aktion bei OK
            pass
    
    def set_button_text(self):
        if self.edit_obj:
            self.btn_ok.setText(f"{self.edit_obj.Name} ändern")
        else:
            self.btn_ok.setText("Neu erstellen")

    def _spin(self, layout, label, minv=0.1, maxv=100.0, suffix=" mm", default=0.0):
        sb = QtWidgets.QDoubleSpinBox()
        sb.setRange(minv, maxv)
        sb.setDecimals(3)
        sb.setSuffix(suffix)
        sb.setValue(default)
        layout.addRow(label, sb)
        return sb

    def update_din_defaults(self):
        name = self.auto_depth.currentText()
        if name not in DIN_WERTE:
            return
        entry = DIN_WERTE[name]
        self.d_top.setValue(entry.senk)
        self.d_bottom.setValue(entry.durch)
        self.taper_depth.setValue(entry.tief)
        self.zyl_oben.setValue(entry.y_oben)
        if self.pt:
            z_start = self.pt.z
            y_oben = entry.y_oben
            senktiefe = entry.tief
            z_end = z_start - y_oben - senktiefe
            self.z_start.setValue(z_start)
            self.z_end.setValue(z_end)
            self.btn_ok.setEnabled(True)

    class Observer:
        def __init__(self, panel):
            self.panel = panel

        def addSelection(self, doc, obj, sub, pos):
            try:
                # 1. Prüfen, ob Panel noch lebt
                if not hasattr(self, "panel") or not self.panel or not isinstance(self.panel, QtWidgets.QWidget):
                    Gui.Selection.removeObserver(self)
                    return

                sel_ex = Gui.Selection.getSelectionEx()
                sel    = Gui.Selection.getSelection()

                # 2. CAM-Objekt (Proxy/DIN)? (Edit-Modus)
                if sel and hasattr(sel[0], "Proxy") and hasattr(sel[0], "DIN"):
                    obj = sel[0]
                    self.panel.edit_obj = obj
                    self.panel.auto_depth.setCurrentText(obj.DIN)
                    self.panel.d_top.setValue(obj.DiameterTop.Value)
                    self.panel.d_bottom.setValue(obj.DiameterBottom.Value)
                    self.panel.taper_depth.setValue(obj.Senkungstiefe if hasattr(obj, "Senkungstiefe") else obj.ZStart.Value - obj.ZEnd.Value if obj.ZEnd.Value > 0 else 2.8)
                    self.panel.zyl_oben.setValue(getattr(obj, "ZylOben", 0.3))
                    self.panel.r_start = obj.DiameterBottom.Value / 2.0
                    self.panel.d_tool.setValue(obj.ToolDiameter.Value)
                    self.panel.feed.setValue(obj.Feed.Value)
                    self.panel.pitch.setValue(obj.Pitch.Value)
                    self.panel.z_start.setValue(obj.ZStart.Value)
                    self.panel.z_end.setValue(obj.ZEnd.Value)
                    self.panel.x_center.setValue(obj.Center.x)
                    self.panel.y_center.setValue(obj.Center.y)
                    self.panel.pt = obj.Center
                    self.panel.btn_ok.setEnabled(True)
                    self.panel.set_button_text()
                    self.panel.info.setText(f"{obj.Name} geladen")
                    return

                # 3. Kreis/SubObject?
                if not sel_ex or not sel_ex[0].SubObjects:
                    self.panel.info.setText("Keine Kreisgeometrie erkannt.")
                    self.panel.btn_ok.setEnabled(False)
                    return

                so = sel_ex[0].SubObjects[0]
                p = r = None
                if hasattr(so, "Center") and hasattr(so, "Radius"):
                    p, r = so.Center, so.Radius
                elif hasattr(so, "Curve") and hasattr(so.Curve, "Radius"):
                    p, r = so.Curve.Center, so.Curve.Radius
                elif hasattr(so, "Surface") and hasattr(so.Surface, "Radius"):
                    p, r = so.Surface.Position, so.Surface.Radius

                if p and r:
                    self.panel.pt = p
                    self.panel.r_start = r
                    self.panel.x_center.setValue(p.x)
                    self.panel.y_center.setValue(p.y)
                    y_oben = self.panel.zyl_oben.value()
                    senktiefe = self.panel.taper_depth.value()
                    z_start = p.z
                    z_end = z_start - y_oben - senktiefe
                    self.panel.z_start.setValue(z_start)
                    self.panel.z_end.setValue(z_end)
                    self.panel.info.setText(f"Kreis – X={p.x:.2f} Y={p.y:.2f} R={r:.2f}")
                    self.panel.btn_ok.setEnabled(True)
                    self.panel.set_button_text()
                else:
                    self.panel.info.setText("Keine Kreisgeometrie erkannt.")
                    self.panel.btn_ok.setEnabled(False)

            except RuntimeError as e:
                print("Observer-Abbruch wegen zerstörtem Widget:", e)
                try:
                    Gui.Selection.removeObserver(self)
                except Exception:
                    pass
                return
            except Exception as e:
                print("Allgemeiner Fehler im Observer:", e)
                try:
                    Gui.Selection.removeObserver(self)
                except Exception:
                    pass
                return

    def close_panel(self):
        try:
            Gui.Selection.removeObserver(self.obs)
        except Exception:
            pass
        Gui.Control.closeDialog()

    def finish(self):
        z_start = self.z_start.value()
        y_oben = self.zyl_oben.value()
        senktiefe = self.taper_depth.value()
        z_end = self.z_end.value()

        if z_end >= z_start:
            QtWidgets.QMessageBox.warning(self, "Z‑Fehler", "Z‑Ende muss unterhalb von Z‑Start liegen (Norm!).")
            return
        if self.pt is None and not self.edit_obj:
            QtWidgets.QMessageBox.warning(self, "Auswahl fehlt", "Bitte einen Kreis wählen.")
            return

        center_vec = FreeCAD.Vector(self.x_center.value(), self.y_center.value(), z_start)

        gcode = generate_helix_gcode(
            center   = center_vec,
            r_top    = self.d_top.value() / 2.0,
            r_bottom = self.d_bottom.value() / 2.0,
            z_start  = z_start,
            y_oben   = y_oben,
            senktiefe= senktiefe,
            pitch    = self.pitch.value(),
            feedrate = self.feed.value(),
            z_end    = z_end,
        )

        doc = FreeCAD.ActiveDocument
        # Neu anlegen oder bestehendes Objekt aktualisieren
        if self.edit_obj:
            op = self.edit_obj
            print("✓ Helix‑Senkung aktualisiert.")
        else:
            op = doc.addObject("Path::FeaturePython", "HelixSenkung")
            Custom.ObjectCustom(op, "Custom")
            op.ViewObject.Proxy = 0
            print("✓ Helix‑Senkung erstellt.")

        if not hasattr(op, "DIN"):
            op.addProperty("App::PropertyString", "DIN", "Helix", "DIN-Größe (z. B. M5)")
        op.DIN = self.auto_depth.currentText()
        if not hasattr(op, "DiameterTop"):
            op.addProperty("App::PropertyLength", "DiameterTop", "Helix", "Senklochdurchmesser")
        op.DiameterTop = self.d_top.value()
        if not hasattr(op, "DiameterBottom"):
            op.addProperty("App::PropertyLength", "DiameterBottom", "Helix", "Bohrlochdurchmesser")
        op.DiameterBottom = self.d_bottom.value()
        if not hasattr(op, "ToolDiameter"):
            op.addProperty("App::PropertyLength", "ToolDiameter", "Helix", "Fräserdurchmesser")
        op.ToolDiameter = self.d_tool.value()
        if not hasattr(op, "Feed"):
            op.addProperty("App::PropertyLength", "Feed", "Helix", "Vorschub")
        op.Feed = self.feed.value()
        if not hasattr(op, "Pitch"):
            op.addProperty("App::PropertyLength", "Pitch", "Helix", "Steigung")
        op.Pitch = self.pitch.value()
        if not hasattr(op, "Center"):
            op.addProperty("App::PropertyVector", "Center", "Helix", "Zentrum")
        op.Center = center_vec
        if not hasattr(op, "ZStart"):
            op.addProperty("App::PropertyLength", "ZStart", "Helix", "Z‑Start")
        op.ZStart = z_start
        if not hasattr(op, "ZEnd"):
            op.addProperty("App::PropertyLength", "ZEnd", "Helix", "Z‑Ende")
        op.ZEnd = z_end
        if not hasattr(op, "ZylOben"):
            op.addProperty("App::PropertyLength", "ZylOben", "Helix", "zylindrischer Teil oben")
        op.ZylOben = y_oben
        op.Gcode = gcode

        jobs = [o for o in doc.Objects if hasattr(o, "Proxy") and hasattr(o.Proxy, "addOperation")]
        if not self.edit_obj and jobs:
            job = jobs[0]
            job.Proxy.addOperation(op)
            tcs = getattr(job, "Tools", None)
            if tcs and hasattr(tcs, "Group") and len(tcs.Group) > 0:
                op.ToolController = tcs.Group[0]

        doc.recompute()

class HelixTaskPanel:
    def __init__(self):
        self.form = HelixPanel()

    def getPanel(self):
        return self.form

    def getStandardButtons(self):
        return int(QtWidgets.QDialogButtonBox.Cancel)

    def reject(self):
        try:
            Gui.Selection.removeObserver(self.form.obs)
        except Exception:
            pass
        return True

def show_helix_dialog():
    sel = Gui.Selection.getSelection()
    if sel and hasattr(sel[0], "Proxy") and hasattr(sel[0], "DIN"):
        dlg = HelixTaskPanel()
        obj = sel[0]
        dlg.form.auto_depth.setCurrentText(obj.DIN)
        dlg.form.d_top.setValue(obj.DiameterTop.Value)
        dlg.form.d_bottom.setValue(obj.DiameterBottom.Value)
        dlg.form.taper_depth.setValue(obj.Senkungstiefe if hasattr(obj, "Senkungstiefe") else obj.ZStart.Value - obj.ZEnd.Value if obj.ZEnd.Value > 0 else 2.8)
        dlg.form.zyl_oben.setValue(getattr(obj, "ZylOben", 0.3))
        dlg.form.r_start = obj.DiameterBottom.Value / 2.0
        dlg.form.d_tool.setValue(obj.ToolDiameter.Value)
        dlg.form.feed.setValue(obj.Feed.Value)
        dlg.form.pitch.setValue(obj.Pitch.Value)
        dlg.form.z_start.setValue(obj.ZStart.Value)
        dlg.form.z_end.setValue(obj.ZEnd.Value)
        dlg.form.x_center.setValue(obj.Center.x)
        dlg.form.y_center.setValue(obj.Center.y)
        dlg.form.edit_obj = obj
        dlg.form.pt = obj.Center
        dlg.form.btn_ok.setEnabled(True)
        dlg.form.set_button_text()
        Gui.Control.showDialog(dlg)
    else:
        Gui.Control.showDialog(HelixTaskPanel())

if __name__ == "__main__" or True:
    show_helix_dialog()
